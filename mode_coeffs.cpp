#include "mode_coeffs.hpp"
#define _USE_MATH_DEFINES 
#include <cmath>

const double PI = 3.14159265358979323846;
// 静态成员初始化
const Eigen::MatrixXi ModeCoeffs::A = ModeCoeffs::initA();
const Eigen::MatrixXi ModeCoeffs::B = ModeCoeffs::initB();
const Eigen::MatrixXi ModeCoeffs::C = ModeCoeffs::initC();
const Eigen::MatrixXi ModeCoeffs::D = ModeCoeffs::initD();
const Eigen::MatrixXi ModeCoeffs::E = ModeCoeffs::initE();
const Eigen::MatrixXi ModeCoeffs::F = ModeCoeffs::initF();
const Eigen::MatrixXi ModeCoeffs::G = ModeCoeffs::initG();
const Eigen::MatrixXi ModeCoeffs::R = ModeCoeffs::initR();
const Eigen::MatrixXd ModeCoeffs::A_cab = ModeCoeffs::initA_cab();
const Eigen::VectorXd ModeCoeffs::A_t = ModeCoeffs::initA_t();
const Eigen::VectorXd ModeCoeffs::A_w = ModeCoeffs::initA_w();
const Eigen::MatrixXd ModeCoeffs::h_cell = ModeCoeffs::initH_cell();

Eigen::MatrixXi ModeCoeffs::initA() {
    Eigen::MatrixXi A(35, 6);
    // A中每个元素依次表示是否含焦炭燃烧消耗的氧气、挥发分燃烧消耗的氧气、CO燃烧消耗的氧气、给风带入的氧气、吸收SO2消耗的氧气以及生成SO2消耗的氧气
    A << 1, 1, 1, 0, 0, 0,   // 第 3 个小室
        1, 1, 1, 0, 0, 0,   // 第 4 个小室
        1, 1, 1, 0, 0, 0,   // 第 5 个小室
        1, 1, 1, 0, 0, 0,   // 第 6 个小室
        1, 1, 1, 0, 0, 0,   // 第 7 个小室
        1, 1, 1, 0, 0, 0,   // 第 8 个小室
        1, 1, 1, 0, 0, 0,   // 第 9 个小室
        1, 1, 1, 0, 0, 0,   // 第 10 个小室
        1, 1, 1, 0, 0, 0,   // 第 11 个小室
        1, 1, 1, 0, 0, 0,   // 第 12 个小室
        1, 1, 1, 0, 0, 0,   // 第 13 个小室
        1, 1, 1, 0, 0, 0,   // 第 14 个小室
        1, 1, 1, 0, 0, 0,   // 第 15 个小室
        1, 1, 1, 0, 0, 0,   // 第 16 个小室
        1, 1, 1, 0, 0, 0,   // 第 17 个小室
        1, 1, 1, 0, 0, 0,   // 第 18 个小室
        1, 1, 1, 0, 0, 0,   // 第 19 个小室
        1, 1, 1, 0, 0, 0,   // 第 20 个小室
        1, 1, 1, 0, 0, 0,   // 第 21 个小室
        1, 1, 1, 0, 0, 0,   // 第 22 个小室
        1, 1, 1, 0, 0, 0,   // 第 23 个小室
        1, 1, 1, 0, 0, 0,   // 第 24 个小室
        1, 1, 1, 1, 0, 0,   // 第 25 个小室，二次风
        1, 1, 1, 1, 0, 0,   // 第 26 个小室，返料风
        1, 1, 1, 0, 0, 0,   // 第 27 个小室
        1, 1, 1, 0, 0, 0,   // 第 28 个小室
        1, 1, 1, 0, 0, 0,   // 第 29 个小室
        1, 1, 1, 0, 0, 0,   // 第 30 个小室
        1, 1, 1, 0, 0, 0,   // 第 31 个小室
        1, 1, 1, 0, 0, 0,   // 第 32 个小室
        1, 1, 1, 0, 0, 0,   // 第 33 个小室
        1, 1, 1, 0, 0, 0,   // 第 34 个小室
        1, 1, 1, 0, 0, 0,   // 第 35 个小室
        1, 1, 1, 0, 0, 0,   // 第 36 个小室
        1, 1, 1, 1, 0, 0;   // 第 37 个小室，一次风
    return A;
}

Eigen::MatrixXi ModeCoeffs::initB() {
    Eigen::MatrixXi B(35, 4);
    // B中每个元素依次表示是否含CO燃烧消耗的CO、CO2还原生成的CO、焦炭燃烧生成的CO、NO还原反应消耗的CO
    B.setOnes(); // 所有小室都为1
    return B;
}

Eigen::MatrixXi ModeCoeffs::initC() {
    Eigen::MatrixXi C(35, 6);
    // C中每个元素依次表示是否含CO燃烧生成的CO2、挥发分燃烧生成的CO2、焦炭燃烧生成的CO2、CO2还原反应消耗的CO2、碳酸钙分解产生的CO2、NO还原反应生成的CO2
    C << 1, 1, 1, 1, 0, 1,   // 重复35行
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1,
        1, 1, 1, 1, 0, 1;
    return C;
}

Eigen::MatrixXi ModeCoeffs::initD() {
    Eigen::MatrixXi D(35, 2);
    D.setZero();
    // D中每个元素依次表示是否含煤中硫氧化生成的SO2、GaO吸收的SO2
    // 第19-37个小室(索引16-34)含硫氧化
    for (int i = 16; i < 35; ++i) {
        D(i, 0) = 1;
        D(i, 1) = 0;
    }
    return D;
}

Eigen::MatrixXi ModeCoeffs::initE() {
    Eigen::MatrixXi E(35, 2);
    // E中每个元素依次表示是否含煤中氮氧化物转化的NO、NO还原反应消耗的NO
    E.setOnes(); // 所有小室都为1
    return E;
}

Eigen::MatrixXi ModeCoeffs::initF() {
    Eigen::MatrixXi F(35, 2);
    F.setZero();
    // F中每个元素依次表示是否含NO还原反应生成的N2、给风带入的N2
    // 第一列：所有小室都有NO还原反应生成的N2
    F.col(0).setOnes();
    // 第二列：只有特定小室有给风带入的N2
    F(22, 1) = 1; // 第25个小室，二次风
    F(23, 1) = 1; // 第26个小室，返料风
    F(34, 1) = 1; // 第37个小室，一次风
    return F;
}

Eigen::MatrixXi ModeCoeffs::initG() {
    Eigen::MatrixXi G(35, 1);
    // G中每个元素表示是否含挥发分燃烧生成的水蒸气和挥发出来的水蒸气
    G.setOnes(); // 所有小室都为1
    return G;
}

Eigen::MatrixXi ModeCoeffs::initR() {
    Eigen::MatrixXi R(35, 4);
    // R中每个元素依次表示是否含挥发分燃烧、焦炭燃烧、SO2的吸收以及NO的还原
    R << 1, 1, 0, 1,   // 重复35行
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1,
        1, 1, 0, 1;
    return R;
}

Eigen::MatrixXd ModeCoeffs::initA_cab() {
    Eigen::MatrixXd A_cab(35, 2);
    A_cab << 54.23, 54.23,  // 第3个小室
        54.23, 54.23,  // 第4个小室
        54.23, 54.23,  // 第5个小室
        54.23, 54.23,  // 第6个小室
        54.23, 54.23,  // 第7个小室
        54.23, 54.23,  // 第8个小室
        54.23, 54.23,  // 第9个小室
        54.23, 54.23,  // 第10个小室
        54.23, 54.23,  // 第11个小室
        54.23, 54.23,  // 第12个小室
        54.23, 54.23,  // 第13个小室
        54.23, 54.23,  // 第14个小室
        54.23, 54.23,  // 第15个小室
        54.23, 54.23,  // 第16个小室
        54.23, 54.23,  // 第17个小室
        54.23, 54.23,  // 第18个小室
        54.23, 54.23,  // 第19个小室
        (10.27 - 0.3125 * 0.3 * 1)* (5.28 - 0.517 * 0.3 * 1), 54.23,  // 第20个小室
        (10.27 - 0.3125 * 0.3 * 2)* (5.28 - 0.517 * 0.3 * 2), (10.27 - 0.3125 * 0.3 * 1)* (5.28 - 0.517 * 0.3 * 1),
        (10.27 - 0.3125 * 0.3 * 3)* (5.28 - 0.517 * 0.3 * 3), (10.27 - 0.3125 * 0.3 * 2)* (5.28 - 0.517 * 0.3 * 2),
        (10.27 - 0.3125 * 0.3 * 4)* (5.28 - 0.517 * 0.3 * 4), (10.27 - 0.3125 * 0.3 * 3)* (5.28 - 0.517 * 0.3 * 3),
        (10.27 - 0.3125 * 0.3 * 5)* (5.28 - 0.517 * 0.3 * 5), (10.27 - 0.3125 * 0.3 * 4)* (5.28 - 0.517 * 0.3 * 4),
        (10.27 - 0.3125 * 0.3 * 6)* (5.28 - 0.517 * 0.3 * 6), (10.27 - 0.3125 * 0.3 * 5)* (5.28 - 0.517 * 0.3 * 5),
        (10.27 - 0.3125 * 0.3 * 7)* (5.28 - 0.517 * 0.3 * 7), (10.27 - 0.3125 * 0.3 * 6)* (5.28 - 0.517 * 0.3 * 6),
        (10.27 - 0.3125 * 0.3 * 8)* (5.28 - 0.517 * 0.3 * 8), (10.27 - 0.3125 * 0.3 * 7)* (5.28 - 0.517 * 0.3 * 7),
        (10.27 - 0.3125 * 0.3 * 9)* (5.28 - 0.517 * 0.3 * 9), (10.27 - 0.3125 * 0.3 * 8)* (5.28 - 0.517 * 0.3 * 8),
        (10.27 - 0.3125 * 0.3 * 10)* (5.28 - 0.517 * 0.3 * 10), (10.27 - 0.3125 * 0.3 * 9)* (5.28 - 0.517 * 0.3 * 9),
        (10.27 - 0.3125 * 0.3 * 11)* (5.28 - 0.517 * 0.3 * 11), (10.27 - 0.3125 * 0.3 * 10)* (5.28 - 0.517 * 0.3 * 10),
        (10.27 - 0.3125 * 0.3 * 12)* (5.28 - 0.517 * 0.3 * 12), (10.27 - 0.3125 * 0.3 * 11)* (5.28 - 0.517 * 0.3 * 11),
        (10.27 - 0.3125 * 0.3 * 13)* (5.28 - 0.517 * 0.3 * 13), (10.27 - 0.3125 * 0.3 * 12)* (5.28 - 0.517 * 0.3 * 12),
        (10.27 - 0.3125 * 0.3 * 14)* (5.28 - 0.517 * 0.3 * 14), (10.27 - 0.3125 * 0.3 * 13)* (5.28 - 0.517 * 0.3 * 13),
        (10.27 - 0.3125 * 0.3 * 15)* (5.28 - 0.517 * 0.3 * 15), (10.27 - 0.3125 * 0.3 * 14)* (5.28 - 0.517 * 0.3 * 14),
        (10.27 - 0.3125 * 0.3 * 16)* (5.28 - 0.517 * 0.3 * 16), (10.27 - 0.3125 * 0.3 * 15)* (5.28 - 0.517 * 0.3 * 15);
    return A_cab;
}

Eigen::VectorXd ModeCoeffs::initA_t() {
    Eigen::VectorXd H_t(37);
    H_t << 0.0, 0.0, 6.4, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;

    // A_t = 3 * H_t * π * d * N，其中d=42mm=0.042m，N=28
    return 3.0 * H_t * PI * 0.042 * 28.0;
}

Eigen::VectorXd ModeCoeffs::initA_w() {
    Eigen::VectorXd H_w(37);
    H_w << 0.0, 0.0, 6.4, 2.0, 2.0, 2.0, 2.0, 2.0, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1,
        0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3;

    double L_w = 2.0 * (10.27 + 5.28) * 0.85; // 周长
    Eigen::VectorXd A_w = H_w * L_w;

    A_w(1) = 14.2 * 2; // 旋风分离器

    // A_w_t = 2 * H_t * π * d * N，其中d=60mm=0.06m，N=16  
    Eigen::VectorXd H_t(37);
    H_t << 0.0, 0.0, 6.4, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
    Eigen::VectorXd A_w_t = 2.0 * H_t * PI * 0.06 * 16.0;

    return A_w + A_w_t;
}

Eigen::MatrixXd ModeCoeffs::initH_cell() {
    Eigen::MatrixXd h_cell(35, 2);
    h_cell << 33.1, 26.7,
        26.7, 24.7,
        24.7, 22.7,
        22.7, 20.7,
        20.7, 18.7,
        18.7, 16.7,
        16.7, 15.6,
        15.6, 14.5,
        14.5, 13.4,
        13.4, 12.3,
        12.3, 11.2,
        11.2, 10.1,
        10.1, 9.0,
        9.0, 7.9,
        7.9, 6.8,
        6.8, 5.7,
        5.7, 5.4,
        5.4, 5.1,
        5.1, 4.8,
        4.8, 4.5,
        4.5, 4.2,
        4.2, 3.9,
        3.9, 3.6,
        3.6, 3.3,
        3.3, 3.0,
        3.0, 2.7,
        2.7, 2.4,
        2.4, 2.1,
        2.1, 1.8,
        1.8, 1.5,
        1.5, 1.2,
        1.2, 0.9,
        0.9, 0.6,
        0.6, 0.3,
        0.3, 0.0;
    return h_cell;
}